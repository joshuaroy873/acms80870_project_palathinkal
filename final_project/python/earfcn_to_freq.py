def earfcn_to_freq(earfcn):
    """
    Convert E-UTRA Absolute Radio Frequency Channel Number (EARFCN) to frequency.

    This function takes an EARFCN value and converts it to the corresponding frequency 
    in MHz based on predefined EARFCN ranges and their associated base frequencies.

    Parameters:
    earfcn (int or str): The EARFCN value to be converted. If the value is "NaN", 
                         the function returns "N/A".

    Returns:
    float or str: The frequency in MHz corresponding to the given EARFCN. If the 
                  EARFCN is "NaN", returns "N/A". If the EARFCN does not fall within 
                  any predefined range, returns 0.0.
    """
    cell_table = [
        (1, 0, 599, 2110.0),
        (2, 600, 1199, 1930.0),
        (3, 1200, 1949, 1805.0),
        (4, 1950, 2399, 2110.0),
        (5, 2400, 2649, 869.0),
        (6, 2650, 2749, 875.0),
        (7, 2750, 3449, 2620.0),
        (8, 3450, 3799, 925.0),
        (9, 3800, 4149, 1844.9),
        (10, 4150, 4749, 2110.0),
        (11, 4750, 4949, 1475.9),
        (12, 5010, 5179, 729.0),
        (13, 5180, 5279, 746.0),
        (14, 5280, 5379, 758.0),
        (17, 5730, 5849, 734.0),
        (18, 5850, 5999, 860.0),
        (19, 6000, 6149, 875.0),
        (20, 6150, 6449, 791.0),
        (21, 6450, 6599, 1495.9),
        (22, 6600, 7399, 3510.0),
        (23, 7500, 7699, 2180.0),
        (24, 7700, 8039, 1525.0),
        (25, 8040, 8689, 1930.0),
        (26, 8690, 9039, 859.0),
        (27, 9040, 9209, 852.0),
        (28, 9210, 9659, 758.0),
        (29, 9660, 9769, 717.0),
        (30, 9770, 9869, 2350.0),
        (31, 9870, 9919, 462.5),
        (32, 9920, 10359, 1452.0),
        (33, 36000, 36199, 1900.0),
        (34, 36200, 36349, 2010.0),
        (35, 36350, 36949, 1850.0),
        (36, 36950, 37549, 1930.0),
        (37, 37550, 37749, 1910.0),
        (38, 37750, 38249, 2570.0),
        (39, 38250, 38649, 1880.0),
        (40, 38650, 39649, 2300.0),
        (41, 39650, 41589, 2496.0),
        (42, 41590, 43589, 3400.0),
        (43, 43590, 45589, 3600.0),
        (44, 45590, 46589, 703.0),
        (45, 46590, 46789, 1447.0),
        (46, 46790, 54539, 5150.0),
        (47, 54540, 55239, 5855.0),
        (48, 55240, 56739, 3550.0),
        (49, 56740, 58239, 3550.0),
        (50, 58240, 59089, 1432.0),
        (51, 59090, 59139, 1427.0),
        (52, 59140, 60139, 3300.0),
        (53, 60140, 60254, 2483.5),
        (65, 65536, 66435, 2110.0),
        (66, 66436, 67335, 2110.0),
        (67, 67336, 67535, 738.0),
        (68, 67536, 67835, 753.0),
        (69, 67836, 68335, 2570.0),
        (70, 68336, 68585, 1995.0),
        (71, 68586, 68935, 617.0),
        (72, 68936, 68985, 461.0),
        (73, 68986, 69035, 460.0),
        (74, 69036, 69465, 1475.0),
        (75, 69466, 70315, 1432.0),
        (76, 70316, 70365, 1427.0),
        (85, 70366, 70545, 728.0),
        (87, 70546, 70595, 420.0),
        (88, 70596, 70645, 422.0),
        (252, 255144, 256143, 5150.0),
        (255, 260894, 262143, 5725.0)
    ]
    if earfcn == "NaN":
        return "N/A"
    for cell in cell_table:
        if cell[1] <= earfcn and cell[2] >= earfcn:
            return (cell[3] + 0.1 * (earfcn - cell[1]))
    return 0.0